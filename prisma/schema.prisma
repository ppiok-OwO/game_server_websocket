// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int         @id @default(autoincrement()) @map("id")
  uuid      String      @unique @map("uuid")
  email     String?     @unique @map("email")
  password  String?     @map("password")
  name      String?     @map("name")
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")
  character Characters?

  @@map("Users")
}

model Characters {
  id           Int      @id @default(autoincrement()) @map("id")
  userId       Int      @unique @map("userId")
  nickname     String   @map("nickname")
  type         Int      @map("type")
  totalHp      Int      @map("totalHp")
  cookingSkill Int      @map("cookingSkill")
  stats        Json     @map("stats")
  stage        Json?    @map("stage")
  gold         Int      @default(1000) @map("gold")
  score        Int?     @map("score")
  hiScore      Int?     @map("hiscore")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  user        Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Ingredients Ingredients[]
}

model Ingredients {
  id          Int      @id @default(autoincrement()) @map("id")
  characterId Int      @map("characterId")
  name        String   @map("name")
  type        Int      @map("type")
  score       Int      @map("score")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  character Characters @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
